{
  "version": 3,
  "sources": ["../../../../../node_modules/ng2-currency-mask/fesm2020/ng2-currency-mask.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\nclass InputManager {\n  constructor(htmlInputElement) {\n    this.htmlInputElement = htmlInputElement;\n  }\n  setCursorAt(position) {\n    if (this.htmlInputElement.setSelectionRange) {\n      this.htmlInputElement.focus();\n      this.htmlInputElement.setSelectionRange(position, position);\n    } else if (this.htmlInputElement.createTextRange) {\n      let textRange = this.htmlInputElement.createTextRange();\n      textRange.collapse(true);\n      textRange.moveEnd(\"character\", position);\n      textRange.moveStart(\"character\", position);\n      textRange.select();\n    }\n  }\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    let newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n  get canInputMoreNumbers() {\n    let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let haveNumberSelected = selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n    let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n    return haventReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n  get inputSelection() {\n    let selectionStart = 0;\n    let selectionEnd = 0;\n    if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n      selectionStart = this.htmlInputElement.selectionStart;\n      selectionEnd = this.htmlInputElement.selectionEnd;\n    } else {\n      let range = document.getSelection().anchorNode;\n      if (range && range.firstChild == this.htmlInputElement) {\n        let lenght = this.htmlInputElement.value.length;\n        let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n        let startRange = this.htmlInputElement.createTextRange();\n        let endRange = this.htmlInputElement.createTextRange();\n        endRange.collapse(false);\n        if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n          selectionStart = selectionEnd = lenght;\n        } else {\n          selectionStart = -startRange.moveStart(\"character\", -lenght);\n          selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n          if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n            selectionEnd = lenght;\n          } else {\n            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n          }\n        }\n      }\n    }\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  }\n  get rawValue() {\n    return this.htmlInputElement && this.htmlInputElement.value;\n  }\n  set rawValue(value) {\n    this._storedRawValue = value;\n    if (this.htmlInputElement) {\n      this.htmlInputElement.value = value;\n    }\n  }\n  get storedRawValue() {\n    return this._storedRawValue;\n  }\n}\nclass InputService {\n  constructor(htmlInputElement, options) {\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.inputManager = new InputManager(htmlInputElement);\n  }\n  addNumber(keyCode) {\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, \"0\");\n    }\n    let keyChar = String.fromCharCode(keyCode);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n    this.updateFieldValue(selectionStart + 1);\n  }\n  applyMask(isNumber, rawValue) {\n    let {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands\n    } = this.options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n    if (!onlyNumbers) {\n      return \"\";\n    }\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n    if (integerPart == \"\") {\n      integerPart = \"0\";\n    }\n    let newRawValue = integerPart;\n    let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n    if (precision > 0) {\n      decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n      newRawValue += decimal + decimalPart;\n    }\n    let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n    let operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n    return operator + prefix + newRawValue + suffix;\n  }\n  clearMask(rawValue) {\n    if (rawValue == null || rawValue == \"\") {\n      return null;\n    }\n    let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n    if (this.options.thousands) {\n      value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n    }\n    if (this.options.decimal) {\n      value = value.replace(this.options.decimal, \".\");\n    }\n    return parseFloat(value);\n  }\n  changeToNegative() {\n    if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n      let selectionStart = this.inputSelection.selectionStart;\n      this.rawValue = \"-\" + this.rawValue;\n      this.updateFieldValue(selectionStart + 1);\n    }\n  }\n  changeToPositive() {\n    let selectionStart = this.inputSelection.selectionStart;\n    this.rawValue = this.rawValue.replace(\"-\", \"\");\n    this.updateFieldValue(selectionStart - 1);\n  }\n  fixCursorPosition(forceToEndPosition) {\n    let currentCursorPosition = this.inputSelection.selectionStart;\n    //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n    if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n      this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n      //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n    } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n      this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n    }\n  }\n  getRawValueWithoutSuffixEndPosition() {\n    return this.rawValue.length - this.options.suffix.length;\n  }\n  getRawValueWithoutPrefixStartPosition() {\n    return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n  }\n  removeNumber(keyCode) {\n    let {\n      decimal,\n      thousands\n    } = this.options;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n    if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n      selectionEnd = this.rawValue.length - this.options.suffix.length;\n      selectionStart = this.rawValue.length - this.options.suffix.length;\n    }\n    //there is no selection\n    if (selectionEnd == selectionStart) {\n      //delete key and the target digit is a number\n      if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n        selectionEnd = selectionEnd + 1;\n      }\n      //delete key and the target digit is the decimal or thousands divider\n      if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n        selectionEnd = selectionEnd + 2;\n        selectionStart = selectionStart + 1;\n      }\n      //backspace key and the target digit is a number\n      if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n        selectionStart = selectionStart - 1;\n      }\n      //backspace key and the target digit is the decimal or thousands divider\n      if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n        selectionStart = selectionStart - 2;\n        selectionEnd = selectionEnd - 1;\n      }\n    }\n    this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n    this.updateFieldValue(selectionStart);\n  }\n  updateFieldValue(selectionStart) {\n    let newRawValue = this.applyMask(false, this.rawValue || \"\");\n    selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n  }\n  updateOptions(options) {\n    let value = this.value;\n    this.options = options;\n    this.value = value;\n  }\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n  set value(value) {\n    this.rawValue = this.applyMask(true, \"\" + value);\n  }\n}\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n    this.htmlInputElement = htmlInputElement;\n  }\n  handleClick(event, chromeAndroid) {\n    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n    //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n    if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n      this.inputService.fixCursorPosition(chromeAndroid);\n    }\n  }\n  handleCut(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n  handleInput(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n    let rawValueLength = this.inputService.rawValue.length;\n    let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n    let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n    let storedRawValueLength = this.inputService.storedRawValue.length;\n    this.inputService.rawValue = this.inputService.storedRawValue;\n    if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n      this.setCursorPosition(event);\n      return;\n    }\n    if (rawValueLength < storedRawValueLength) {\n      if (this.inputService.value != 0) {\n        this.inputService.removeNumber(8);\n      } else {\n        this.setValue(null);\n      }\n    }\n    if (rawValueLength > storedRawValueLength) {\n      switch (keyCode) {\n        case 43:\n          this.inputService.changeToPositive();\n          break;\n        case 45:\n          this.inputService.changeToNegative();\n          break;\n        default:\n          if (!this.inputService.canInputMoreNumbers || isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null) {\n            return;\n          }\n          this.inputService.addNumber(keyCode);\n      }\n    }\n    this.setCursorPosition(event);\n    this.onModelChange(this.inputService.value);\n  }\n  handleKeydown(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    let keyCode = event.which || event.charCode || event.keyCode;\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n      let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n      if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n        this.setValue(null);\n        this.onModelChange(this.inputService.value);\n      }\n      if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n      if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n  handleKeypress(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    let keyCode = event.which || event.charCode || event.keyCode;\n    if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n      return;\n    }\n    switch (keyCode) {\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n      default:\n        if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n          this.inputService.addNumber(keyCode);\n        }\n    }\n    event.preventDefault();\n    this.onModelChange(this.inputService.value);\n  }\n  handleKeyup(event) {\n    this.inputService.fixCursorPosition();\n  }\n  handlePaste(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n  setValue(value) {\n    this.inputService.value = value;\n  }\n  getNewKeyCode(oldString, newString) {\n    if (oldString.length > newString.length) {\n      return null;\n    }\n    for (let x = 0; x < newString.length; x++) {\n      if (oldString.length == x || oldString[x] != newString[x]) {\n        return newString.charCodeAt(x);\n      }\n    }\n    return null;\n  }\n  isArrowEndHomeKeyInFirefox(event) {\n    if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n      return true;\n    }\n    return false;\n  }\n  isReadOnly() {\n    return this.htmlInputElement && this.htmlInputElement.readOnly;\n  }\n  setCursorPosition(event) {\n    let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n    // For some reason, in Android, the event got override before the timeout and change the target.\n    const inputElement = event.target;\n    setTimeout(function () {\n      inputElement.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n    }, 0);\n  }\n}\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyMaskDirective),\n  multi: true\n};\nclass CurrencyMaskDirective {\n  constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n    this.currencyMaskConfig = currencyMaskConfig;\n    this.elementRef = elementRef;\n    this.keyValueDiffers = keyValueDiffers;\n    this.options = {};\n    this.optionsTemplate = {\n      align: \"right\",\n      allowNegative: true,\n      decimal: \".\",\n      precision: 2,\n      prefix: \"$ \",\n      suffix: \"\",\n      thousands: \",\"\n    };\n    if (currencyMaskConfig) {\n      this.optionsTemplate = currencyMaskConfig;\n    }\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n  ngAfterViewInit() {\n    this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n  }\n  ngDoCheck() {\n    if (this.keyValueDiffer.diff(this.options)) {\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n      this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n    }\n  }\n  ngOnInit() {\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n  }\n  handleBlur(event) {\n    this.inputHandler.getOnModelTouched().apply(event);\n  }\n  handleClick(event) {\n    this.inputHandler.handleClick(event, this.isChromeAndroid());\n  }\n  handleCut(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleCut(event);\n    }\n  }\n  handleInput(event) {\n    if (this.isChromeAndroid()) {\n      this.inputHandler.handleInput(event);\n    }\n  }\n  handleKeydown(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeydown(event);\n    }\n  }\n  handleKeypress(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeypress(event);\n    }\n  }\n  handleKeyup(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeyup(event);\n    }\n  }\n  handlePaste(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handlePaste(event);\n    }\n  }\n  isChromeAndroid() {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n  registerOnChange(callbackFunction) {\n    this.inputHandler.setOnModelChange(callbackFunction);\n  }\n  registerOnTouched(callbackFunction) {\n    this.inputHandler.setOnModelTouched(callbackFunction);\n  }\n  setDisabledState(value) {\n    this.elementRef.nativeElement.disabled = value;\n  }\n  validate(abstractControl) {\n    let result = {};\n    if (abstractControl.value > this.max) {\n      result.max = true;\n    }\n    if (abstractControl.value < this.min) {\n      result.min = true;\n    }\n    return result != {} ? result : null;\n  }\n  writeValue(value) {\n    this.inputHandler.setValue(value);\n  }\n}\nCurrencyMaskDirective.ɵfac = function CurrencyMaskDirective_Factory(t) {\n  return new (t || CurrencyMaskDirective)(i0.ɵɵdirectiveInject(CURRENCY_MASK_CONFIG, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n};\nCurrencyMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CurrencyMaskDirective,\n  selectors: [[\"\", \"currencyMask\", \"\"]],\n  hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.handleBlur($event);\n      })(\"click\", function CurrencyMaskDirective_click_HostBindingHandler($event) {\n        return ctx.handleClick($event);\n      })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n        return ctx.handleCut($event);\n      })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n        return ctx.handleInput($event);\n      })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n        return ctx.handleKeypress($event);\n      })(\"keyup\", function CurrencyMaskDirective_keyup_HostBindingHandler($event) {\n        return ctx.handleKeyup($event);\n      })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n        return ctx.handlePaste($event);\n      });\n    }\n  },\n  inputs: {\n    max: \"max\",\n    min: \"min\",\n    options: \"options\"\n  },\n  features: [i0.ɵɵProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n    provide: NG_VALIDATORS,\n    useExisting: CurrencyMaskDirective,\n    multi: true\n  }])]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[currencyMask]\",\n      providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n        provide: NG_VALIDATORS,\n        useExisting: CurrencyMaskDirective,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CURRENCY_MASK_CONFIG]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.KeyValueDiffers\n    }];\n  }, {\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: [\"blur\", [\"$event\"]]\n    }],\n    handleClick: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: [\"cut\", [\"$event\"]]\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: [\"input\", [\"$event\"]]\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: [\"keypress\", [\"$event\"]]\n    }],\n    handleKeyup: [{\n      type: HostListener,\n      args: [\"keyup\", [\"$event\"]]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: [\"paste\", [\"$event\"]]\n    }]\n  });\n})();\nclass CurrencyMaskModule {}\nCurrencyMaskModule.ɵfac = function CurrencyMaskModule_Factory(t) {\n  return new (t || CurrencyMaskModule)();\n};\nCurrencyMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CurrencyMaskModule,\n  declarations: [CurrencyMaskDirective],\n  imports: [CommonModule, FormsModule],\n  exports: [CurrencyMaskDirective]\n});\nCurrencyMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMaskModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [CurrencyMaskDirective],\n      exports: [CurrencyMaskDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ng2-currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };\n"],
  "mappings": "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",
  "names": []
}
